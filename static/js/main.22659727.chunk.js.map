{"version":3,"sources":["logo.svg","components/KillGame.js","components/Addicon.js","components/LotteryBall.js","components/Lottery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","Addicon","props","state","icons","clickHandler","bind","idx","Math","floor","random","this","options","length","newIcon","setState","curState","map","i","className","onClick","defaultProps","LotteryBall","num","Lottery","generate","pradinis","maxNum","push","tarpinis","balls","randomIndx","console","log","splice","title","n","window","ballNumber","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,gNCGpBC,Y,MCDjBC,E,kDAcJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,IACtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAHH,E,2DAMjB,IAAIC,EAAMC,KAAKC,MAAMD,KAAKE,SAAWC,KAAKT,MAAMU,QAAQC,QACpDC,EAAUH,KAAKT,MAAMU,QAAQL,GAGjCI,KAAKI,UAAS,SAAAC,GAAQ,MAAG,CACrBZ,MAAM,GAAD,mBAAKY,EAASZ,OAAd,CAAoBU,U,+BAQ7B,IAAMV,EAAQO,KAAKR,MAAMC,MAAMa,KAAI,SAAAC,GAAC,OAClC,uBAAGC,UAAS,iBAAYD,QAE1B,OACE,6BACM,4BAAKd,EAAL,KACJ,4BAAQgB,QAAST,KAAKN,cAAtB,iB,GAvCcL,aAAhBC,EACGoB,aAAe,CACpBT,QAAS,CACP,QACA,SACA,UACA,KACA,UACA,OACA,OACA,S,MAmCSX,IChCAqB,E,uKAVX,OACE,yBAAKH,UAAU,eACb,yBAAKA,UAAU,QACb,2BAAIR,KAAKT,MAAMqB,W,GALCvB,aCCpBwB,G,wDAGJ,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXoB,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACrBE,UAAU,GAEZ,EAAKpB,aAAe,EAAKA,aAAaC,KAAlB,gBAPH,E,2DAWjB,IADA,IAAIoB,EAAW,GACNR,EAAI,EAAGA,GAAKP,KAAKT,MAAMyB,OAAQT,IACtCQ,EAASE,KAAKV,GAIhB,IADA,IAAIW,EAAW,GACRA,EAAShB,OAASF,KAAKT,MAAM4B,OAAO,CACzC,IAAIC,EAAavB,KAAKC,MAAMD,KAAKE,SAAWgB,EAASb,QACrDmB,QAAQC,IAAIF,GACZF,EAASD,KAAKF,EAASK,IACvBL,EAASQ,OAAOH,EAAY,GAE9BpB,KAAKI,SAAS,CAAEQ,IAAI,GAAD,OAAMM,GAAWJ,UAAU,M,+BAI9C,OACE,yBAAKN,UAAU,WACb,4BAAKR,KAAKT,MAAMiC,OAChB,yBAAKhB,UAAU,gBACZR,KAAKR,MAAMsB,UACVd,KAAKR,MAAMoB,IAAIN,KAAI,SAAAmB,GAAC,OAAI,kBAAC,EAAD,CAAab,IAAKa,QAE9C,4BAAQhB,QAAST,KAAKN,cAAtB,iB,GApCcL,cAAhBwB,EACGH,aAAe,CAAEgB,OAAQ,CAAC,CAAEF,MAAO,QAASG,WAAY,KAyClDd,QC1BAe,MAbf,WACE,OACE,yBAAKpB,UAAU,OAIb,kBAAC,EAAD,CAASgB,MAAM,WAAWL,MAAO,EAAGH,OAAQ,KAC5C,kBAAC,EAAD,CAASQ,MAAM,YAAYL,MAAO,EAAGH,OAAQ,KAC7C,kBAAC,EAAD,CAASQ,MAAM,YAAYL,MAAO,GAAIH,OAAQ,QCHhCa,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.22659727.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport \"./KillGame.css\";\r\n\r\nclass KillGame extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      score: 0\r\n    };\r\n    this.trippleKill = this.trippleKill.bind(this);\r\n  }\r\n\r\n  //    trippleclickHandler = () => {\r\n  //     this.setState(cuState => ({\r\n  //       score: cuState.score + 3\r\n  //     }));\r\n  //     this.setState(cuState => ({\r\n  //       score: cuState.score + 2\r\n  //     }));\r\n  //   };\r\n  incrementScore(cuState) {\r\n    return { score: cuState.score + 1 };\r\n  }\r\n  trippleKill() {\r\n    this.setState(this.incrementScore);\r\n    this.setState(this.incrementScore);\r\n    this.setState(this.incrementScore);\r\n  }\r\n  render() {\r\n    let clickHandler = () => {\r\n      this.setState({\r\n        score: this.state.score + 1\r\n      });\r\n    };\r\n    return (\r\n      <div className=\"KillGame\">\r\n        <h1>{this.state.score}</h1>\r\n        <button onClick={clickHandler}>kill</button>\r\n        <button onClick={this.trippleKill}>Tripple kill</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KillGame;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Addicon extends Component {\r\n  static defaultProps = {\r\n    options: [\r\n      \"angry\",\r\n      \"anchor\",\r\n      \"archive\",\r\n      \"at\",\r\n      \"archway\",\r\n      \"baby\",\r\n      \"bell\",\r\n      \"bolt\"\r\n    ]\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { icons: [] };\r\n    this.clickHandler = this.clickHandler.bind(this);\r\n  }\r\n  clickHandler() {\r\n    let idx = Math.floor(Math.random() * this.props.options.length);\r\n    let newIcon = this.props.options[idx];\r\n    \r\n    \r\n    this.setState(curState=>({\r\n        icons:[...curState.icons,newIcon]\r\n    }))\r\n    // this.setState(curState => ({\r\n    //   icons: Array.push(newIcon)\r\n    // }));\r\n  }\r\n\r\n  render() { \r\n    const icons = this.state.icons.map(i => (\r\n      <i className={`fas fa-${i}`}/>\r\n    ));\r\n    return (\r\n      <div>\r\n            <h1>{icons} </h1>\r\n        <button onClick={this.clickHandler}>Click Me</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Addicon;\r\n","import React, { Component } from \"react\";\r\nimport \"./LotteryBall.css\";\r\n\r\nclass LotteryBall extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"LotteryBall\">\r\n        <div className=\"ball\">\r\n          <p>{this.props.num}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LotteryBall;\r\n","import React, { Component } from \"react\";\r\nimport LotteryBall from \"./LotteryBall\";\r\nimport \"./Lottery.css\";\r\n\r\nclass Lottery extends Component {\r\n  static defaultProps = { window: [{ title: \"Lotto\", ballNumber: 6 }] };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      num: [0, 0, 0, 0, 0, 0],\r\n      generate: false\r\n    };\r\n    this.clickHandler = this.clickHandler.bind(this);\r\n  }\r\n  clickHandler() {\r\n    let pradinis = [];\r\n    for (let i = 1; i <= this.props.maxNum; i++) {\r\n      pradinis.push(i);\r\n    }\r\n\r\n    let tarpinis = [];\r\n    while (tarpinis.length < this.props.balls) {\r\n      let randomIndx = Math.floor(Math.random() * pradinis.length);\r\n      console.log(randomIndx);\r\n      tarpinis.push(pradinis[randomIndx]);\r\n      pradinis.splice(randomIndx, 1);\r\n    }\r\n    this.setState({ num: [...tarpinis], generate: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Lottery\">\r\n        <h1>{this.props.title}</h1>\r\n        <div className=\"loteryWindow\">\r\n          {this.state.generate &&\r\n            this.state.num.map(n => <LotteryBall num={n} />)}\r\n        </div>\r\n        <button onClick={this.clickHandler}>Generate</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Lottery;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport KillGame from \"./components/KillGame\";\nimport Addicon from \"./components/Addicon\";\nimport Lottery from \"./components/Lottery\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <KillGame /> */}\n\n      {/* <Addicon /> */}\n      <Lottery title=\"Loterija\" balls={6} maxNum={50} />\n      <Lottery title=\"Loto mini\" balls={4} maxNum={10} />\n      <Lottery title=\"Loto Maxi\" balls={10} maxNum={100} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}